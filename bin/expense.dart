// Expense Model
// Represents an expense, mapping to a table row in the database.
class Expense {
  int? id; // Nullable because it's auto-generated by the database
  String description;
  double amount;
  String category;
  DateTime date; // Store DateTime directly in Dart, convert for DB

  // Constructor for creating new Expense objects (ID will be null initially)
  Expense({
    this.id,
    required this.description,
    required this.amount,
    required this.category,
    required this.date,
  });

  // Convert an Expense object into a Map for database insertion.
  // The keys in this Map should match your database column names.
  Map<String, dynamic> toMap() {
    return {
      // 'id': id, // When inserting, you generally omit the ID, DB auto-generates
      'description': description,
      'amount': amount,
      'category': category,
      'date': date.toIso8601String(), // Store DateTime as a string (ISO 8601 format is standard)
    };
  }

  // Create an Expense object from a Map (retrieved from the database).
  // The keys in the map will match your database column names.
  factory Expense.fromMap(Map<String, dynamic> map) {
    return Expense(
      id: map['id'] as int, // ID will be present when reading from DB
      description: map['description'] as String,
      amount: map['amount'] as double,
      category: map['category'] as String,
      date: DateTime.parse(map['date'] as String), // Parse string back to DateTime
    );
  }

  @override
  String toString() {
    // Format the date for cleaner output
    final formattedDate = date.toLocal().toIso8601String().split('T')[0];
    return 'ID: $id, Description: $description, Amount: Â£${amount.toStringAsFixed(2)}, Category: $category, Date: $formattedDate';
  }
}